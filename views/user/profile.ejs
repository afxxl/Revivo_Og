<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Profile - REVIVO</title>
    <link href="/css/styles.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Henny+Penny&family=Playfair+Display:wght@400;500;600&family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      .profile-bg {
        background-image: url('/Images/images/OLD_PAPER_TEXTURE.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        min-height: 100vh;
        position: relative;
      }
      .profile-tab {
        transition: all 0.3s ease;
      }
      .profile-tab:hover {
        background-color: rgba(44, 44, 44, 0.05);
      }
      .profile-tab.active {
        background-color: rgba(44, 44, 44, 0.1);
        border-left: 3px solid #2C2C2C;
      }
      .edit-icon {
        background-color: #2C2C2C;
        padding: 6px;
        border-radius: 50%;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }
      .edit-icon:hover {
        background-color: #f8c78d;
        transform: scale(1.1);
      }
      .cropper-view-box,
      .cropper-face {
        border-radius: 50%;
      }
      .cropper-view-box {
        outline: 1px solid #2C2C2C;
        box-shadow: 0 0 0 1px #39f;
      }
      .cropper-dashed,
      .cropper-line,
      .cropper-point {
        display: none !important;
      }
      .cropper-container {
        max-width: 100%;
        height: auto;
      }
    </style>
  </head>

  <body class="profile-bg">
    <%- include('../partials/user/header.ejs') %>

    <div class="container mx-auto px-4 py-12">
      <div class="flex flex-col md:flex-row gap-8">
        <div class="w-full md:w-64 bg-white/70 rounded-lg shadow-md p-4 h-fit">
          <div class="flex flex-col items-center py-4 border-b border-[#2C2C2C]/20">
            <div class="relative w-24 h-24 rounded-full overflow-hidden mb-3">
              <img 
                src="<%= user.profileImage || '/Images/default-profile.jpg' %>" 
                alt="Profile Image" 
                class="w-full h-full object-cover profile-image-preview"
                id="profileImagePreview"
              >
              <button 
                class="absolute bottom-1 right-1 edit-icon text-white"
                onclick="openImageUploadModal()"
              >
                <i class="fas fa-camera text-sm"></i>
              </button>
            </div>
            <h3 class="font-medium text-lg text-[#2C2C2C] profile-name"><%= user.name %></h3>
            <p class="text-sm text-[#2C2C2C]/70 profile-email"><%= user.email %></p>
          </div>

          <nav class="mt-4 space-y-1">
            <a href="#profile" class="block px-4 py-3 profile-tab active" onclick="switchTab('profile')">
              <i class="fas fa-user mr-3 text-[#2C2C2C]/80"></i> Profile Details
            </a>
            <a href="#edit-profile" class="block px-4 py-3 profile-tab" onclick="switchTab('edit-profile')">
              <i class="fas fa-edit mr-3 text-[#2C2C2C]/80"></i> Edit Profile
            </a>
            <a href="#addresses" class="block px-4 py-3 profile-tab" onclick="switchTab('addresses')">
              <i class="fas fa-map-marker-alt mr-3 text-[#2C2C2C]/80"></i> My Addresses
            </a>
            <a href="#orders" class="block px-4 py-3 profile-tab" onclick="switchTab('orders')">
              <i class="fas fa-shopping-bag mr-3 text-[#2C2C2C]/80"></i> My Orders
            </a>
            <a href="#change-password" class="block px-4 py-3 profile-tab" onclick="switchTab('change-password')">
              <i class="fas fa-lock mr-3 text-[#2C2C2C]/80"></i> Change Password
            </a>
            <a href="/logout" class="block px-4 py-3 profile-tab text-red-600 hover:bg-red-50">
              <i class="fas fa-sign-out-alt mr-3"></i> Logout
            </a>
          </nav>
        </div>

        <div class="flex-1">
          <div id="profile-section" class="tab-content bg-white/70 rounded-lg shadow-md p-6">
            <h2 class="text-2xl font-henny text-[#2C2C2C] mb-6">Profile Details</h2>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Full Name</label>
                <p class="text-[#2C2C2C] profile-name-display"><%= user.name %></p>
              </div>
              <div>
                <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Email</label>
                <p class="text-[#2C2C2C] profile-email-display"><%= user.email %></p>
              </div>
              <div>
                <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Phone</label>
                <p class="text-[#2C2C2C] profile-phone-display"><%= user.phone || 'Not provided' %></p>
              </div>
            </div>
          </div>

          <div id="edit-profile-section" class="tab-content hidden bg-white/70 rounded-lg shadow-md p-6">
            <h2 class="text-2xl font-henny text-[#2C2C2C] mb-6">Edit Profile</h2>
            <form id="profileForm" class="space-y-4">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Full Name</label>
                  <input 
                    type="text" 
                    name="name" 
                    value="<%= user.name %>" 
                    class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                  >
                </div>
                <div>
                  <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Email</label>
                  <input 
                    type="email" 
                    name="email" 
                    value="<%= user.email %>" 
                    class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                  >
                </div>
                <div>
                  <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Phone</label>
                  <input 
                    type="tel" 
                    name="phone" 
                    value="<%= user.phone || '' %>" 
                    class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                  >
                </div>
              </div>
              <div class="pt-4">
                <button 
                  type="submit" 
                  class="px-6 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>

          <div id="addresses-section" class="tab-content hidden bg-white/70 rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-henny text-[#2C2C2C]">My Addresses</h2>
              <button 
                onclick="openAddressModal()"
                class="px-4 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors text-sm"
              >
                <i class="fas fa-plus mr-2"></i> Add New Address
              </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <% if (user.addresses && user.addresses.length > 0) { %>
                <% user.addresses.forEach(address => { %>
                  <div class="border border-[#2C2C2C]/20 rounded-lg p-4 relative">
                    <% if (address.isDefault) { %>
                      <span class="absolute top-2 right-2 bg-[#f8c78d] text-[#2C2C2C] text-xs px-2 py-1 rounded">Default</span>
                    <% } %>
                    <h3 class="font-medium text-lg mb-2"><%= address.name %> (<%= address.addressType %>)</h3>
                    <p class="text-sm text-[#2C2C2C]/80 mb-1"><%= address.address %></p>
                    <p class="text-sm text-[#2C2C2C]/80 mb-1"><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                    <p class="text-sm text-[#2C2C2C]/80 mb-3">
                              Phone: <%= address.phone %>
                              <% if (address.altPhone) { %>
                                <br>Alt. Phone: <%= address.altPhone %>
                              <% } %>
                            </p>
                                        <div class="flex gap-2">
                      <button 
                        onclick="editAddress('<%= address._id %>')"
                        class="px-3 py-1 border border-[#2C2C2C] text-[#2C2C2C] rounded hover:bg-[#2C2C2C] hover:text-white transition-colors text-xs"
                      >
                        Edit
                      </button>
                      <% if (!address.isDefault) { %>
                        <button 
                          onclick="setDefaultAddress('<%= address._id %>')"
                          class="px-3 py-1 border border-[#2C2C2C] text-[#2C2C2C] rounded hover:bg-[#2C2C2C] hover:text-white transition-colors text-xs"
                        >
                          Set Default
                        </button>
                        <button 
                          onclick="deleteAddress('<%= address._id %>')"
                          class="px-3 py-1 border border-red-500 text-red-500 rounded hover:bg-red-500 hover:text-white transition-colors text-xs"
                        >
                          Delete
                        </button>
                      <% } %>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <div class="col-span-full text-center py-8">
                  <i class="fas fa-map-marker-alt text-4xl text-[#2C2C2C]/30 mb-4"></i>
                  <p class="text-[#2C2C2C]/70">You haven't added any addresses yet.</p>
                </div>
              <% } %>
            </div>
          </div>


<div id="orders-section" class="tab-content hidden bg-white/70 rounded-lg shadow-md p-6">
  <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
    <h2 class="text-2xl font-henny text-[#2C2C2C]">Order History</h2>
    
    <div class="flex items-center gap-2 w-full md:w-96">
      <form id="ordersSearchForm" class="flex-1 flex items-center gap-2">
        <input 
          type="text" 
          name="search" 
          placeholder="Search by product name..." 
          class="w-full p-2 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
          value="<%= user.ordersSearch || '' %>"
        >
        <button 
          type="submit" 
          class="p-2 text-[#2C2C2C] hover:text-[#2C2C2C]/70 transition-colors"
        >
          <i class="fas fa-search"></i>
        </button>
        <% if (user.ordersSearch) { %>
          <a 
            href="?ordersPage=1#orders"
            class="p-2 text-red-500 hover:text-red-600 transition-colors flex items-center"
            title="Clear search"
          >
            <i class="fas fa-times mr-1"></i>
            <span class="text-sm">Cancel</span>
          </a>
        <% } %>
      </form>
    </div>
  </div>

  <% if (user.orders && user.orders.length > 0) { %>
    <div class="space-y-4 md:overflow-x-auto">
      <table class="hidden md:table w-full">
        <thead class="border-b border-[#2C2C2C]/20">
          <tr class="text-sm text-[#2C2C2C]/80">
            <th class="text-left py-3 px-2">Order ID</th>
            <th class="text-left py-3 px-2">Products</th>
            <th class="text-left py-3 px-2">Order Date</th>
            <th class="text-left py-3 px-2">Amount</th>
            <th class="text-left py-3 px-2">Status</th>
            <th class="text-right py-3 px-2">Actions</th>
          </tr>
        </thead>

        <tbody>
          <% user.orders.forEach(order => { %>
            <tr class="border-b border-[#2C2C2C]/10 hover:bg-gray-50 transition-colors">
              <td class="py-4 px-2">
                <span class="text-sm font-mono text-[#2C2C2C]/70">
                  <%= order.orderId %>
                </span>
              </td>

              <td class="py-4 px-2">
                <div class="flex items-center">
                  <div class="flex -space-x-2">
                    <% order.orderItems.slice(0,3).forEach((item, index) => { %>
                      <% if(item.product?.productImage?.length) { %>
                        <img 
                          src="<%= item.product.productImage[0] %>" 
                          alt="<%= item.product.productName %>"
                          class="w-10 h-10 object-cover rounded border <%= index > 0 ? 'opacity-75' : '' %>"
                          onerror="this.src='/Images/placeholder.jpg'"
                        >
                      <% } %>
                    <% }) %>
                  </div>
                  <% if (order.orderItems.length > 3) { %>
                    <span class="ml-2 text-sm text-[#2C2C2C]/70">
                      +<%= order.orderItems.length - 3 %> more
                    </span>
                  <% } %>
                </div>
              </td>

              <td class="py-4 px-2">
                <span class="text-sm">
                  <%= order.createdOn.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric' 
                  }) %>
                </span>
              </td>

              <td class="py-4 px-2">
                <span class="font-medium">$<%= order.finalAmount?.toFixed(2) %></span>
              </td>

              <td class="py-4 px-2">
                <span class="px-3 py-1 rounded-full text-xs 
                  <%= order.status === 'Delivered' ? 'bg-green-100 text-green-800' : 
                     order.status === 'Cancelled' ? 'bg-red-100 text-red-800' : 
                     'bg-yellow-100 text-yellow-800' %>">
                  <%= order.status %>
                </span>
              </td>

              <td class="py-4 px-2 text-right">
                <a 
                  href="/orders/<%= order.orderId %>" 
                  class="inline-flex items-center text-sm text-[#2C2C2C] hover:text-[#2C2C2C]/70"
                >
                  Details
                  <i class="fas fa-chevron-right ml-1 text-xs"></i>
                </a>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>

      <div class="md:hidden space-y-4">
        <% user.orders.forEach(order => { %>
          <div class="border-b border-[#2C2C2C]/10 pb-4">
            <div class="grid grid-cols-2 gap-2 text-sm mb-2">
              <div class="text-[#2C2C2C]/70">Order ID:</div>
              <div class="font-mono text-sm"><%= order.orderId %></div>
            </div>

            <div class="flex items-center mb-3">
              <div class="flex -space-x-2">
                <% order.orderItems.slice(0,3).forEach((item, index) => { %>
                  <% if(item.product?.productImage?.length) { %>
                    <img 
                      src="<%= item.product.productImage[0] %>" 
                      alt="<%= item.product.productName %>"
                      class="w-8 h-8 object-cover rounded border <%= index > 0 ? 'opacity-75' : '' %>"
                      onerror="this.src='/Images/placeholder.jpg'"
                    >
                  <% } %>
                <% }) %>
              </div>
              <% if (order.orderItems.length > 3) { %>
                <span class="ml-2 text-sm text-[#2C2C2C]/70">
                  +<%= order.orderItems.length - 3 %> more
                </span>
              <% } %>
            </div>

            <div class="grid grid-cols-2 gap-2 text-sm">
              <div class="text-[#2C2C2C]/70">Order Date:</div>
              <div>
                <%= order.createdOn.toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'short', 
                  day: 'numeric' 
                }) %>
              </div>
              
              <div class="text-[#2C2C2C]/70">Amount:</div>
              <div class="font-medium">$<%= order.finalAmount?.toFixed(2) %></div>
              
              <div class="text-[#2C2C2C]/70">Status:</div>
              <div>
                <span class="px-2 py-1 rounded-full text-xs 
                  <%= order.status === 'Delivered' ? 'bg-green-100 text-green-800' : 
                     order.status === 'Cancelled' ? 'bg-red-100 text-red-800' : 
                     'bg-yellow-100 text-yellow-800' %>">
                  <%= order.status %>
                </span>
              </div>
            </div>

            <div class="mt-3 text-right">
              <a 
                href="/orders/<%= order.orderId %>" 
                class="inline-flex items-center text-sm text-[#2C2C2C] hover:text-[#2C2C2C]/70"
              >
                Details
                <i class="fas fa-chevron-right ml-1 text-xs"></i>
              </a>
            </div>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="mt-6 pt-4 border-t border-[#2C2C2C]/10">
      <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <div class="text-sm text-[#2C2C2C]/80">
          Showing <%= (user.ordersCurrentPage - 1) * user.ordersPerPage + 1 %> - 
          <%= Math.min(user.ordersCurrentPage * user.ordersPerPage, user.ordersTotal) %> 
          of <%= user.ordersTotal %> orders
        </div>
        
        <div class="flex gap-2">
          <a 
            href="?ordersPage=<%= user.ordersCurrentPage - 1 %><% if (user.ordersSearch) { %>&search=<%= user.ordersSearch %><% } %>#orders"
            class="px-3 py-1 border border-[#2C2C2C]/30 rounded-md <%= user.ordersCurrentPage === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#2C2C2C]/10' %>"
            <%= user.ordersCurrentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : '' %>
          >
            Previous
          </a>
          <a 
            href="?ordersPage=<%= user.ordersCurrentPage + 1 %><% if (user.ordersSearch) { %>&search=<%= user.ordersSearch %><% } %>#orders"
            class="px-3 py-1 border border-[#2C2C2C]/30 rounded-md <%= user.ordersCurrentPage === user.ordersTotalPages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#2C2C2C]/10' %>"
            <%= user.ordersCurrentPage === user.ordersTotalPages ? 'tabindex="-1" aria-disabled="true"' : '' %>
          >
            Next
          </a>
        </div>
      </div>
    </div>
<% } else { %>
  <div class="text-center py-12">
    <i class="fas fa-shopping-bag text-4xl text-[#2C2C2C]/30 mb-4"></i>
    <% if (user.ordersSearch) { %>
      <p class="text-[#2C2C2C]/70 mb-6">No orders found matching "<%= user.ordersSearch %>"</p>
      <button 
        onclick="clearSearch()"
        class="px-6 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors"
      >
        Clear Search
      </button>
    <% } else { %>
      <p class="text-[#2C2C2C]/70 mb-6">You haven't placed any orders yet.</p>
      <a 
        href="/shop" 
        class="px-6 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors"
      >
        Start Shopping
      </a>
    <% } %>
  </div>
<% } %>

  </div>
<div id="change-password-section" class="tab-content hidden bg-white/70 rounded-lg shadow-md p-6">
  <h2 class="text-2xl font-henny text-[#2C2C2C] mb-6">Change Password</h2>
  <form id="changePasswordForm" class="space-y-4 max-w-md">
    <div>
      <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Current Password</label>
      <div class="relative">
        <input 
          type="password" 
          name="currentPassword" 
          class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
          required
        >
        <button 
          type="button" 
          class="absolute right-3 top-3 text-[#2C2C2C]/50 hover:text-[#2C2C2C]"
          onclick="togglePasswordVisibility(this)"
        >
          <i class="fas fa-eye"></i>
        </button>
      </div>
    </div>
    <div>
      <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">New Password</label>
      <div class="relative">
        <input 
          type="password" 
          name="newPassword" 
          class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
          required
        >
        <button 
          type="button" 
          class="absolute right-3 top-3 text-[#2C2C2C]/50 hover:text-[#2C2C2C]"
          onclick="togglePasswordVisibility(this)"
        >
          <i class="fas fa-eye"></i>
        </button>
      </div>
      <div class="text-xs text-[#2C2C2C]/70 mt-1">
        Password must be at least 8 characters long and contain a mix of letters, numbers, and symbols.
      </div>
    </div>
    <div>
      <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Confirm New Password</label>
      <div class="relative">
        <input 
          type="password" 
          name="confirmPassword" 
          class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
          required
        >
        <button 
          type="button" 
          class="absolute right-3 top-3 text-[#2C2C2C]/50 hover:text-[#2C2C2C]"
          onclick="togglePasswordVisibility(this)"
        >
          <i class="fas fa-eye"></i>
        </button>
      </div>
    </div>
    <div class="pt-2">
      <button 
        type="submit" 
        class="px-6 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors"
      >
        Update Password
      </button>
    </div>
  </form>
</div>
                  </div>
      </div>
    </div>

    <div id="addressModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[80vh] flex flex-col">
        <div class="flex justify-between items-center border-b p-4">
          <h3 class="text-lg font-medium" id="modalTitle">Add New Address</h3>
          <button onclick="closeAddressModal()" class="text-[#2C2C2C]/50 hover:text-[#2C2C2C]">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form id="addressForm" class="p-4 space-y-4 flex-1 overflow-y-auto">
          <input type="hidden" id="addressId" name="id">
          <div>
            <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Address Type</label>
            <select 
              name="addressType" 
              id="modalAddressType"
              class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
            >
              <option value="HOME">Home</option>
              <option value="WORK">Work</option>
              <option value="OTHER">Other</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Full Name</label>
            <input 
              type="text" 
              name="name" 
              id="modalName",
              class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
              required
            >
          </div>
          <div>
            <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Address</label>
            <textarea 
              name="address" 
              id="modalAddress"
              rows="3" 
              class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
              required
            ></textarea>
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">City</label>
              <input 

                type="text" 
                id="modalCity"
                name="city" 
                class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                required
              >
            </div>
            <div>
              <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">State</label>
              <input 
              id="modalState"
                type="text" 
                name="state" 
                class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                required
              >
            </div>
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Pincode</label>
              <input 
              id="modalPincode"
                type="text" 
                name="pincode" 
                class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                required
              >
            </div>
            <div>
              <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Phone</label>
              <input 
              id="modalPhone"
                type="tel" 
                name="phone" 
                class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
                required
              >
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-[#2C2C2C]/80 mb-1">Alternate Phone (Optional)</label>
            <input 
            id="modalAltPhone"
              type="tel" 
              name="altPhone" 
              class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
            >
          </div>
          <div class="flex items-center">
            <input 
              type="checkbox" 
              id="isDefault" 
              name="isDefault" 
              value="true"
              class="w-4 h-4 border-[#2C2C2C]/30 rounded focus:ring-[#2C2C2C]"
            >
            <label for="isDefault" class="ml-2 text-sm text-[#2C2C2C]/80">Set as default address</label>
          </div>
          <div class="flex justify-end gap-3 pt-4">
            <button 
              type="button" 
              onclick="closeAddressModal()"
              class="px-4 py-2 border border-[#2C2C2C] text-[#2C2C2C] rounded-md hover:bg-[#2C2C2C]/10 transition-colors"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors"
            >
              Save Address
            </button>
          </div>
        </form>
      </div>
    </div>


<div id="otpModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
    <h3 class="text-lg font-medium text-[#2C2C2C] mb-4">Verify Your New Email</h3>
    <p class="text-[#2C2C2C]/70 mb-4">An OTP has been sent to your new email address. Please enter it below:</p>
    <form id="otpForm" class="space-y-4">
      <input 
        type="text" 
        name="otp" 
        placeholder="Enter OTP" 
        class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
      >
      <div class="flex items-center justify-between">
        <div class="text-sm text-[#2C2C2C]/70">
          Time remaining: <span id="otpTimer">01:00</span>
        </div>
        <button 
          type="button" 
          id="resendOtpBtn" 
          class="text-sm text-[#2C2C2C]/70 hover:text-[#2C2C2C] disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Resend OTP
        </button>
      </div>
      <div class="flex justify-end gap-3">
        <button 
          type="button" 
          onclick="closeOtpModal()" 
          class="px-4 py-2 border border-[#2C2C2C] text-[#2C2C2C] rounded-md hover:bg-[#2C2C2C]/10"
        >
          Cancel
        </button>
        <button 
          type="submit" 
          class="px-4 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a]"
        >
          Verify
        </button>
      </div>
    </form>
  </div>
</div>
<div id="passwordOtpModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
    <h3 class="text-lg font-medium text-[#2C2C2C] mb-4">Verify Password Change</h3>
    <p class="text-[#2C2C2C]/70 mb-4">An OTP has been sent to your email. Please enter it below to confirm password change:</p>
    <form id="passwordOtpForm" class="space-y-4">
      <input 
        type="text" 
        name="otp" 
        placeholder="Enter OTP" 
        class="w-full p-3 border border-[#2C2C2C]/30 rounded-md focus:outline-none focus:ring-1 focus:ring-[#2C2C2C]"
        required
      >
      <div class="flex items-center justify-between">
        <div class="text-sm text-[#2C2C2C]/70">
          Time remaining: <span id="passwordOtpTimer">01:00</span>
        </div>
        <button 
          type="button" 
          id="resendPasswordOtpBtn" 
          class="text-sm text-[#2C2C2C]/70 hover:text-[#2C2C2C] disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Resend OTP
        </button>
      </div>
      <div class="flex justify-end gap-3">
        <button 
          type="button" 
          onclick="closePasswordOtpModal()" 
          class="px-4 py-2 border border-[#2C2C2C] text-[#2C2C2C] rounded-md hover:bg-[#2C2C2C]/10"
        >
          Cancel
        </button>
        <button 
          type="submit" 
          class="px-4 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a]"
        >
          Verify & Change Password
        </button>
      </div>
    </form>
  </div>
</div>
    <div id="imageUploadModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] flex flex-col">
        <div class="flex justify-between items-center border-b p-4">
          <h3 class="text-lg font-medium">Upload Profile Image</h3>
          <button onclick="closeImageUploadModal()" class="text-[#2C2C2C]/50 hover:text-[#2C2C2C]">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="p-4 flex-1 overflow-y-auto">
          <div class="mb-4">
            <input type="file" id="imageUploadInput" accept="image/*" class="hidden">
            <div class="flex justify-center">
              <button 
                onclick="document.getElementById('imageUploadInput').click()"
                class="px-4 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors"
              >
                Select Image
              </button>
            </div>
          </div>
          <div class="mb-4">
            <div id="imageCropperContainer" class="hidden">
              <img id="imageToCrop" class="max-w-full max-h-[400px]">
            </div>
          </div>
          <div class="flex justify-end gap-3">
            <button 
              onclick="closeImageUploadModal()"
              class="px-4 py-2 border border-[#2C2C2C] text-[#2C2C2C] rounded-md hover:bg-[#2C2C2C]/10 transition-colors"
            >
              Cancel
            </button>
            <button 
              id="uploadButton"
              onclick="uploadCroppedImage()"
              class="px-4 py-2 bg-[#2C2C2C] text-white rounded-md hover:bg-[#1a1a1a] transition-colors hidden"
            >
              Upload & Crop
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>

document.addEventListener('DOMContentLoaded', () => {
    const hash = window.location.hash.substring(1);
    const validTabs = ['profile', 'edit-profile', 'addresses', 'orders', 'change-password'];
    
    if (validTabs.includes(hash)) {
        switchTab(hash);
    } else if (sessionStorage.getItem('autoScrollToOrders')) {
        switchTab('orders');
        sessionStorage.removeItem('autoScrollToOrders');
    } else {
        switchTab('profile');
    }

    if (hash || sessionStorage.getItem('autoScrollToOrders')) {
        setTimeout(() => {
            document.getElementById(`${hash || 'orders'}-section`).scrollIntoView({
                behavior: 'auto',
                block: 'start'
            });
        }, 100);
    }

    const defaultAddress = document.querySelector('.address-card [data-is-default="true"]');
    if (defaultAddress) {
        selectAddress(defaultAddress.closest('.address-card'));
    }
});


     
function switchTab(tabName) {
    history.replaceState(null, null, `#${tabName}`);
    
    document.querySelectorAll('.tab-content').forEach(content => content.classList.add('hidden'));
    document.getElementById(`${tabName}-section`).classList.remove('hidden');
    document.querySelectorAll('.profile-tab').forEach(tab => tab.classList.remove('active'));
    document.querySelector(`.profile-tab[href="#${tabName}"]`).classList.add('active');
}

      function togglePasswordVisibility(button) {
        const input = button.parentElement.querySelector('input');
        const icon = button.querySelector('i');
        if (input.type === 'password') {
          input.type = 'text';
          icon.classList.remove('fa-eye');
          icon.classList.add('fa-eye-slash');
        } else {
          input.type = 'password';
          icon.classList.remove('fa-eye-slash');
          icon.classList.add('fa-eye');
        }
      }

      function showOtpModal() {
        document.getElementById('otpModal').classList.remove('hidden');
        startOtpTimer();
      }

document.getElementById('resendOtpBtn').addEventListener('click', async function() {
  try {
    const response = await fetch('/resend-profile-otp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    const data = await response.json();
    if (data.success) {
      showToast('New OTP has been sent!', 'success');
      startOtpTimer();
      this.disabled = true;
    } else {
      showToast(data.message || 'Failed to resend OTP', 'error');
    }
  } catch (error) {
    console.error('Error resending OTP:', error);
    showToast('Failed to resend OTP', 'error');
  }
});

      function closeOtpModal() {
        document.getElementById('otpModal').classList.add('hidden');
clearInterval(otpCountdown);
  remainingTime = 60;

  document.getElementById('otpTimer').textContent = '01:00';
  document.getElementById('resendOtpBtn').disabled = true;
      }


function openAddressModal(addressId = null) {
  const modal = document.getElementById('addressModal');
  const form = document.getElementById('addressForm');
  const title = document.getElementById('modalTitle');
  
  if (addressId) {
    title.textContent = 'Edit Address';
    document.getElementById('addressId').value = addressId;
  } else {
    title.textContent = 'Add New Address';
    form.reset();
    document.getElementById('addressId').value = '';
  }
  
  modal.classList.remove('hidden');
}
            function closeAddressModal() {
        document.getElementById('addressModal').classList.add('hidden');
      }

      let cropper;

      function openImageUploadModal() {
        document.getElementById('imageUploadModal').classList.remove('hidden');
        document.getElementById('imageCropperContainer').classList.add('hidden');
        document.getElementById('uploadButton').classList.add('hidden');
      }

      function closeImageUploadModal() {
        document.getElementById('imageUploadModal').classList.add('hidden');
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      }

document.getElementById('imageUploadInput').addEventListener('change', function(e) {
  const file = e.target.files[0];
  if (!file) return;

  const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
  if (!validTypes.includes(file.type)) {
    showToast('Only JPG, PNG, GIF, or WEBP images are allowed', 'error');
    this.value = ''; 
    return;
  }

  const maxSize = 5 * 1024 * 1024; 
  if (file.size > maxSize) {
    showToast('Image must be less than 5MB', 'error');
    this.value = ''; 
    return;
  }

  const reader = new FileReader();
  reader.onload = function(event) {
    const image = document.getElementById('imageToCrop');
    image.src = event.target.result;
    
    const container = document.getElementById('imageCropperContainer');
    container.classList.remove('hidden');
    document.getElementById('uploadButton').classList.remove('hidden');
    
    if (cropper) {
      cropper.destroy();
    }
    
    image.onload = function() {
      if (this.naturalWidth < 100 || this.naturalHeight < 100) {
        showToast('Image must be at least 100x100 pixels', 'error');
        container.classList.add('hidden');
        document.getElementById('uploadButton').classList.add('hidden');
        return;
      }
      
      cropper = new Cropper(image, {
        aspectRatio: 1, 
        viewMode: 1, 
        autoCropArea: 0.8,
        responsive: true,
        guides: false,
        center: false,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: false,
      });
    };
  };
  reader.readAsDataURL(file);
});
async function uploadCroppedImage() {
  if (!cropper) {
    showToast('Please select and crop an image first', 'error');
    return;
  }

  try {
    const canvas = cropper.getCroppedCanvas({
      width: 500,
      height: 500,
      minWidth: 100,
      minHeight: 100,
      maxWidth: 1024,
      maxHeight: 1024,
      fillColor: '#fff',
      imageSmoothingEnabled: true,
      imageSmoothingQuality: 'high',
    });

    if (!canvas) {
      throw new Error('Could not crop image');
    }

    canvas.toBlob(async (blob) => {
      const formData = new FormData();
      formData.append('profileImage', blob, 'profile.jpg');

      try {
        const response = await fetch('/update-profile-image', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to upload image');
        }
        
        const data = await response.json();
        
        if (data.success) {
          document.getElementById('profileImagePreview').src = data.imageUrl;
          showToast('Profile image updated successfully!', 'success');
          closeImageUploadModal();
        } else {
          throw new Error(data.message || 'Failed to update profile image');
        }
      } catch (error) {
        console.error('Upload error:', error);
        showToast(error.message || 'An error occurred while uploading', 'error');
      }
    }, 'image/jpeg', 0.9);
  } catch (error) {
    console.error('Cropping error:', error);
    showToast(error.message || 'An error occurred while processing the image', 'error');
  }
}
document.getElementById('profileForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const name = this.name.value.trim();
  const email = this.email.value.trim();
  const phone = this.phone.value.trim();
  
  document.querySelectorAll('.profile-error').forEach(el => el.remove());
  
  let isValid = true;
  
  if (!name) {
    showError(this.name, 'Name is required');
    isValid = false;
  } else if (name.length < 2 || name.length > 50) {
    showError(this.name, 'Name must be between 2-50 characters');
    isValid = false;
  }
  
  if (!email) {
    showError(this.email, 'Email is required');
    isValid = false;
  } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    showError(this.email, 'Please enter a valid email');
    isValid = false;
  }
  
  if (!phone) {
    showError(this.phone, 'Phone number is required');
    isValid = false;
  } else if (!/^[0-9]{10,15}$/.test(phone)) {
    showError(this.phone, 'Please enter a valid phone number (10-15 digits)');
    isValid = false;
  }
  
  if (isValid) {
    const formData = new FormData(this);
    try {
      const response = await fetch('/update-profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(Object.fromEntries(formData))
      });
      
      const data = await response.json();
      
      if (data.success) {
        if (data.requiresOtp) {
          showOtpModal();
        } else {
          showToast('Profile updated successfully!', 'success');
          updateProfileDisplay(data.user);
          switchTab('profile');
        }
      } else {
        showToast(data.message || 'Failed to update profile', 'error');
      }
    } catch (error) {
      showToast('An error occurred. Please try again.', 'error');
    }
  }
});

function showError(input, message) {
  const existingError = input.parentNode.querySelector('.password-error');
  if (existingError) existingError.remove();
  
  const error = document.createElement('div');
  error.className = 'password-error text-red-500 text-xs mt-1';
  error.textContent = message;
  
  input.parentNode.appendChild(error);
  
  input.classList.add('border-red-500', 'focus:ring-red-500');
  
  input.addEventListener('input', function() {
    this.classList.remove('border-red-500', 'focus:ring-red-500');
    const error = this.parentNode.querySelector('.password-error');
    if (error) error.remove();
  }, { once: true });
}

document.getElementById('otpForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  const formData = new FormData(this);
  try {
    const response = await fetch('/verify-email-otp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(Object.fromEntries(formData))
    });
    const data = await response.json();
    console.log("Verify OTP response:", data); 
    if (data.success) {
      showToast('Email verified and profile updated!', 'success');
      closeOtpModal();
      updateProfileDisplay(data.user);
      switchTab('profile');
    } else {
      showToast(data.message || 'Invalid OTP', 'error');
    }
  } catch (error) {
    console.error('Fetch error:', error);
    showToast('An error occurred while verifying OTP', 'error');
  }
});
                    let otpCountdown;
       let remainingTime = 60;

       function startOtpTimer(){
          const timerDisplay = document.getElementById('otpTimer');
          const resendButton = document.getElementById('resendOtpBtn');

          remainingTime = 60;
          resendButton.disabled = true;

          otpCountdown = setInterval(()=>{
              remainingTime--;  
              const minutes = Math.floor(remainingTime/60);
              const second = remainingTime%60;
              timerDisplay.textContent = `${String(minutes).padStart(2,'0')}:${String(second).padStart(2,'0')}`;
                
                if(remainingTime<=0){
                    clearInterval(otpCountdown);
                    resendButton.disabled = false;
                    timerDisplay.textContent = '00:00';
                  }
            },1000);

        }

function updateProfileDisplay(user) {
    document.querySelector('.profile-name').textContent = user.name;
    document.querySelector('.profile-email').textContent = user.email; 
    document.querySelector('.profile-name-display').textContent = user.name;
    document.querySelector('.profile-email-display').textContent = user.email;
    document.querySelector('.profile-phone-display').textContent = user.phone || 'Not provided';
}

document.getElementById('changePasswordForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  document.querySelectorAll('.password-error').forEach(el => el.remove());
  
  const formData = {
    currentPassword: this.currentPassword.value,
    newPassword: this.newPassword.value,
    confirmPassword: this.confirmPassword.value
  };
  
  try {
    const verifyResponse = await fetch('/verify-current-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        currentPassword: formData.currentPassword
      })
    });
    
    const verifyData = await verifyResponse.json();
    
    if (!verifyResponse.ok) {
      showError(this.currentPassword, verifyData.message || 'Incorrect current password');
      return;
    }
    
    const validateResponse = await fetch('/validate-password-change', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    
    const validateData = await validateResponse.json();
    
    if (!validateResponse.ok) {
      if (validateData.message.includes("New password")) {
        showError(this.newPassword, validateData.message);
      } else if (validateData.message.includes("Passwords do not match")) {
        showError(this.confirmPassword, validateData.message);
      } else {
        showError(this.newPassword, validateData.message);
        showError(this.confirmPassword, validateData.message);
      }
      return;
    }
    
    const otpResponse = await fetch('/send-password-change-otp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        currentPassword: formData.currentPassword,
        newPassword: formData.newPassword
      })
    });
    
    const otpData = await otpResponse.json();
    
    if (otpData.success) {
      sessionStorage.setItem('tempPasswordData', JSON.stringify(formData));
      showPasswordOtpModal();
    } else {
      showToast(otpData.message || 'Failed to send OTP', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred', 'error');
  }
});
      

document.getElementById('addressForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const fields = {
    name: this.name.value.trim(),
    address: this.address.value.trim(),
    city: this.city.value.trim(),
    state: this.state.value.trim(),
    pincode: this.pincode.value.trim(),
    phone: this.phone.value.trim(),
    altPhone: this.altPhone.value.trim()
  };
  
  document.querySelectorAll('.address-error').forEach(el => el.remove());
  
  let isValid = true;
  
  if (!fields.name) {
    showAddressError(this.name, 'Name is required');
    isValid = false;
  } else if (fields.name.length < 2 || fields.name.length > 50) {
    showAddressError(this.name, 'Name must be between 2-50 characters');
    isValid = false;
  }
  
  if (!fields.address) {
    showAddressError(this.address, 'Address is required');
    isValid = false;
  } else if (fields.address.length < 10) {
    showAddressError(this.address, 'Address must be at least 10 characters');
    isValid = false;
  }
  
  if (!fields.city) {
    showAddressError(this.city, 'City is required');
    isValid = false;
  }
  
  if (!fields.state) {
    showAddressError(this.state, 'State is required');
    isValid = false;
  }
  
  if (!fields.pincode) {
    showAddressError(this.pincode, 'Pincode is required');
    isValid = false;
  } else if (!/^\d{6}$/.test(fields.pincode)) {
    showAddressError(this.pincode, 'Pincode must be 6 digits');
    isValid = false;
  }
  
  if (!fields.phone) {
    showAddressError(this.phone, 'Phone is required');
    isValid = false;
  } else if (!/^[0-9]{10}$/.test(fields.phone)) {
    showAddressError(this.phone, 'Phone must be 10 digits');
    isValid = false;
  }
  
  if (fields.altPhone && !/^[0-9]{10}$/.test(fields.altPhone)) {
    showAddressError(this.altPhone, 'Alternate phone must be 10 digits');
    isValid = false;
  }
  
  if (isValid) {
    const formData = new FormData(this);
    try {
      const addressId = document.getElementById('addressId').value;
      const url = addressId ? `/addresses/${addressId}` : '/addresses';
      const method = addressId ? 'PATCH' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(Object.fromEntries(formData))
      });
      
      const data = await response.json();
      
      if (response.ok) {
        showToast('Address saved successfully!', 'success');
        closeAddressModal();
        setTimeout(() => location.reload(), 1000);
      } else {
        throw new Error(data.message || 'Failed to save address');
      }
    } catch (error) {
      showToast(error.message, 'error');
    }
  }
});

function showAddressError(input, message) {
  const error = document.createElement('div');
  error.className = 'address-error text-red-500 text-xs mt-1';
  error.textContent = message;
  input.parentNode.appendChild(error);
  input.classList.add('border-red-500');
  input.addEventListener('input', function() {
    this.classList.remove('border-red-500');
    const error = this.parentNode.querySelector('.address-error');
    if (error) error.remove();
  }, { once: true });
}


      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `fixed bottom-4 right-4 ${type === 'success' ? 'bg-[#2C2C2C]' : 'bg-red-500'} text-white px-6 py-3 rounded-lg shadow-xl transform translate-y-0 opacity-100 transition-all duration-300 z-50 flex items-center`;
        toast.innerHTML = `
          <span class="mr-2">
            ${type === 'success' ? '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' : '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>'}
          </span>
          <span class="font-montserrat">${message}</span>
        `;
        document.body.appendChild(toast);
        setTimeout(() => {
          toast.classList.add('translate-y-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }

    

async function setDefaultAddress(addressId) {
  try {
    const response = await fetch(`/addresses/${addressId}`, {
      method: 'PATCH',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        isDefault: true,
        updateType: 'setDefault' 
      })
    });
    
    const data = await response.json();
    
    if (response.ok) {
      showToast('Default address updated!', 'success');
      setTimeout(() => location.reload(), 1000);
    } else {
      showToast(data.message || 'Failed to update default address', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred', 'error');
  }
}


async function deleteAddress(addressId) {
  const { value: isConfirmed } = await Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#2C2C2C',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  });

  if (isConfirmed) {
    try {
      const response = await fetch(`/addresses/${addressId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to delete address');
      }

      showToast('Address deleted successfully!', 'success');
      setTimeout(() => location.reload(), 1000);
    } catch (error) {
      console.error('Error:', error);
      showToast(error.message || 'An error occurred while deleting the address', 'error');
    }
  }
}


async function editAddress(addressId) {
  try {
    const response = await fetch(`/addresses/${addressId}`, {
      credentials: 'include'
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to fetch address');
    }

    const address = await response.json();

    document.getElementById('addressId').value = address._id;
    document.getElementById('modalAddressType').value = address.addressType;
    document.getElementById('modalName').value = address.name;
    document.getElementById('modalAddress').value = address.address;
    document.getElementById('modalCity').value = address.city;
    document.getElementById('modalState').value = address.state;
    document.getElementById('modalPincode').value = address.pincode;
    document.getElementById('modalPhone').value = address.phone;
    document.getElementById('modalAltPhone').value = address.altPhone || '';
    document.getElementById('isDefault').checked = address.isDefault;

    openAddressModal(addressId);
  } catch (error) {
    console.error('Edit address error:', error);
    showToast(error.message || 'Failed to load address details', 'error');
  }
}

function cancelOrder(orderId) {
  if (confirm('Are you sure you want to cancel this order?')) {
    fetch('/cancel-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ orderId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showToast('Order cancelled successfully!', 'success');
        location.reload();
      } else {
        showToast(data.message || 'Failed to cancel order', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('An error occurred while cancelling the order', 'error');
    });
  }
}

document.getElementById('ordersSearchForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const search = this.search.value;
  const url = new URL(window.location);
  url.searchParams.set('search', search);
  url.searchParams.set('ordersPage', 1);
  window.location = url.toString();
});

function clearSearch() {
  window.location = "?ordersPage=1#orders";
}



let passwordOtpCountdown;
let passwordRemainingTime = 60; // 60 seconds = 1 minute

function startPasswordOtpTimer() {
  const timerDisplay = document.getElementById('passwordOtpTimer');
  const resendButton = document.getElementById('resendPasswordOtpBtn');

  passwordRemainingTime = 60;
  resendButton.disabled = true;
  timerDisplay.textContent = '01:00';

  passwordOtpCountdown = setInterval(() => {
    passwordRemainingTime--;
    const minutes = Math.floor(passwordRemainingTime / 60);
    const seconds = passwordRemainingTime % 60;
    timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    
    if (passwordRemainingTime <= 0) {
      clearInterval(passwordOtpCountdown);
      resendButton.disabled = false;
      timerDisplay.textContent = '00:00';
    }
  }, 1000);
}

function showPasswordOtpModal() {
  document.getElementById('passwordOtpModal').classList.remove('hidden');
  startPasswordOtpTimer();
}

function closePasswordOtpModal() {
  document.getElementById('passwordOtpModal').classList.add('hidden');
  clearInterval(passwordOtpCountdown);
  passwordRemainingTime = 60;
  document.getElementById('passwordOtpTimer').textContent = '01:00';
  document.getElementById('resendPasswordOtpBtn').disabled = true;
}



document.getElementById('resendPasswordOtpBtn').addEventListener('click', async function() {
  const passwordData = JSON.parse(sessionStorage.getItem('tempPasswordData'));
  
  if (!passwordData) {
    showToast('Session expired. Please try again.', 'error');
    return;
  }
  
  try {
    const response = await fetch('/resend-password-change-otp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      showToast('New OTP has been sent!', 'success');
      startPasswordOtpTimer();
      this.disabled = true;
    } else {
      showToast(data.message || 'Failed to resend OTP', 'error');
    }
  } catch (error) {
    console.error('Error resending OTP:', error);
    showToast('Failed to resend OTP', 'error');
  }
});

document.getElementById('passwordOtpForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const otp = this.otp.value;
  const passwordData = JSON.parse(sessionStorage.getItem('tempPasswordData'));
  
  if (!passwordData) {
    showToast('Session expired. Please try again.', 'error');
    closePasswordOtpModal();
    return;
  }
  
  try {
    const response = await fetch('/verify-password-change-otp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        otp: otp,
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      showToast('Password changed successfully!', 'success');
      sessionStorage.removeItem('tempPasswordData');
      closePasswordOtpModal();
      document.getElementById('changePasswordForm').reset();
    } else {
      showToast(data.message || 'Failed to change password', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred while changing password', 'error');
  }
});


    </script>
  </body>
</html>    

