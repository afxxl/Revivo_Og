<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Set New Password</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-image: url("/Images/images/OLD_PAPER_TEXTURE.jpg");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
      }

      .error-message {
        color: #B91C1C;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        display: none;
      }

      .input-group:focus-within {
        border-color: #2C2C2C;
      }

      .password-strength {
        height: 4px;
        transition: all 0.3s;
        margin-top: 0.5rem;
        border-radius: 2px;
      }

      @keyframes formFade {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
      }

      .animate-form {
        animation: formFade 0.5s ease-out;
      }
    </style>
  </head>
  <body>
    <%-include("../../views/partials/user/header")%>

    <div class="min-h-screen flex items-center justify-center p-4 mt-20">
      <div class="max-w-md w-full backdrop-blur-sm bg-white/30 rounded-lg p-8 space-y-6 shadow-lg animate-form">
        <!-- Title -->
        <div class="text-center space-y-2">
          <h1 class="text-3xl font-henny text-[#2C2C2C]">Set New Password</h1>
          <p class="text-sm text-[#2C2C2C]/70">Create a strong password for your account</p>
        </div>

        <form id="passwordForm" class="space-y-6" action="/updatePassword" method="POST">
          <div class="space-y-4">
            <div class="input-group relative">
              <input
                type="password"
                id="password"
                name="password"
                placeholder="New Password"
                class="w-full p-3 border-b-2 border-[#2C2C2C]/50 bg-transparent focus:outline-none focus:border-[#2C2C2C] transition-colors pr-10"
              />
              <button type="button" class="absolute right-3 top-3 text-[#2C2C2C]/50 toggle-password">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
              </button>
              <div class="password-strength bg-[#2C2C2C]/10"></div>
              <div id="error1" class="error-message"></div>
            </div>

            <div class="input-group relative">
              <input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                placeholder="Confirm Password"
                class="w-full p-3 border-b-2 border-[#2C2C2C]/50 bg-transparent focus:outline-none focus:border-[#2C2C2C] transition-colors pr-10"
              />
              <button type="button" class="absolute right-3 top-3 text-[#2C2C2C]/50 toggle-password">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
              </button>
              <div id="error2" class="error-message"></div>
            </div>

            <%if(typeof message !== 'undefined' && message){%>
              <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md">
                <%=message%>
              </div>
            <%}%>

            <div class="text-xs text-[#2C2C2C]/70 space-y-1">
              <p class="requirement" data-requirement="length">• At least 8 characters</p>
              <p class="requirement" data-requirement="uppercase">• At least one uppercase letter</p>
              <p class="requirement" data-requirement="lowercase">• At least one lowercase letter</p>
              <p class="requirement" data-requirement="number">• At least one number</p>
              <p class="requirement" data-requirement="special">• At least one special character</p>
            </div>

            <button
              type="submit"
              class="w-full bg-[#2C2C2C] text-white py-3 rounded-md hover:bg-[#1a1a1a] transition-colors font-medium mt-6"
            >
              Update Password
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', function() {
          const input = this.previousElementSibling;
          const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
          input.setAttribute('type', type);
        });
      });

      const password = document.getElementById('password');
      const confirmPassword = document.getElementById('confirmPassword');
      const error1 = document.getElementById('error1');
      const error2 = document.getElementById('error2');
      const form = document.getElementById('passwordForm');
      const strengthBar = document.querySelector('.password-strength');
      const requirements = document.querySelectorAll('.requirement');

      function checkPasswordStrength(password) {
        let strength = 0;
        const patterns = {
          length: password.length >= 8,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /[0-9]/.test(password),
          special: /[^A-Za-z0-9]/.test(password)
        };

        Object.entries(patterns).forEach(([key, valid]) => {
          const requirement = document.querySelector(`[data-requirement="${key}"]`);
          if (valid) {
            strength++;
            requirement.style.color = '#2C2C2C';
          } else {
            requirement.style.color = '#2C2C2C/50';
          }
        });

        const colors = ['#EF4444', '#F59E0B', '#10B981', '#059669'];
        strengthBar.style.width = `${(strength / 5) * 100}%`;
        strengthBar.style.backgroundColor = colors[strength - 1] || colors[0];

        return strength >= 4;
      }

      password.addEventListener('input', function() {
        checkPasswordStrength(this.value);
      });

      form.addEventListener('submit', function(e) {
        e.preventDefault();
        let isValid = true;

        if (!checkPasswordStrength(password.value)) {
          error1.style.display = 'block';
          error1.textContent = 'Password does not meet requirements';
          isValid = false;
        } else {
          error1.style.display = 'none';
        }

        if (password.value !== confirmPassword.value) {
          error2.style.display = 'block';
          error2.textContent = 'Passwords do not match';
          isValid = false;
        } else {
          error2.style.display = 'none';
        }

        if (isValid) {
          this.submit();
        }
      });
    </script>
  </body>
</html>
