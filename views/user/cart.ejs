<!doctype html>
<html lang="en">
  <head>
    <title>Revivo - Your Cart</title>
    <link href="/css/styles.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Henny+Penny&family=Playfair+Display:wght@400;500;600&family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet">

    <style>
      .cart-item {
        transition: all 0.3s ease;
      }
      .cart-item:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      }
      .quantity-btn {
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #e0dcd4;
        background: transparent;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      .quantity-btn:hover {
        background: #f8f7f5;
      }
      .quantity-input {
        width: 50px;
        text-align: center;
        border-top: 1px solid #e0dcd4;
        border-bottom: 1px solid #e0dcd4;
        border-left: none;
        border-right: none;
        outline: none;
      }
      .remove-btn {
        transition: all 0.2s ease;
      }
      .remove-btn:hover {
        color: #d32f2f;
      }
      .checkout-btn {
        transition: all 0.3s ease;
        letter-spacing: 1px;
      }
      .checkout-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(44, 44, 44, 0.15);
      }
      .subtotal-display, 
      .shipping-display, 
      .total-display {
        transition: all 0.3s ease;
      }
      .unavailable-item {
        opacity: 0.7;
        position: relative;
      }
      .unavailable-item::after {
        content: "Unavailable";
        position: absolute;
        top: 10px;
        right: 10px;
        background: #f8c78d;
        color: #2C2C2C;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
      }
      .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border .75s linear infinite;
      }
      @keyframes spinner-border {
        to { transform: rotate(360deg); }
      }
      .quantity-input:disabled {
        background-color: #f8f7f5;
        cursor: not-allowed;
      }
      /* Toast Confirmation Dialog */
      .toast-confirm {
        transform: translateY(0);
        opacity: 1;
        transition: all 0.3s ease;
      }
      .toast-confirm.hidden {
        transform: translateY(100%);
        opacity: 0;
      }
    </style>
  </head>

  <body class="bg-[#f8f7f5]">
    <%- include('../partials/user/header.ejs') %>

    <div class="container mx-auto px-4 py-12 max-w-7xl">
      <div class="flex items-center gap-3 mb-8">
        <a href="/" class="text-[#2C2C2C]/60 hover:text-[#2C2C2C] transition-colors font-montserrat text-sm">Home</a>
        <span class="text-[#2C2C2C]/40">/</span>
        <span class="text-[#2C2C2C] font-montserrat text-sm">Shopping Cart</span>
      </div>

      <h1 class="text-3xl font-henny mb-8 text-[#2C2C2C]">Your Cart</h1>

      <% if (!canCheckout) { %>
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
          <p class="font-bold">Unable to Checkout</p>
          <p><%= errorMessage || 'Some items in your cart are no longer available or invalid. Please remove them to proceed.' %></p>
        </div>
      <% } %>

      <% if (cart.items.length === 0) { %>
        <div class="text-center py-16 empty-cart-message">
          <svg class="w-16 h-16 mx-auto text-[#2C2C2C]/30 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
          </svg>
          <h2 class="text-xl font-medium text-[#2C2C2C] mb-4">Your cart is empty</h2>
          <p class="text-[#2C2C2C]/70 mb-6 font-montserrat">Start shopping to add items to your cart</p>
          <a href="/shop" class="inline-block px-6 py-3 bg-[#2C2C2C] text-white rounded-sm hover:bg-[#1a1a1a] transition-colors font-montserrat">
            Continue Shopping
          </a>
        </div>
      <% } else { %>
        <div class="flex flex-col lg:flex-row gap-8">
          <div class="lg:w-2/3">
            <div class="bg-white rounded-sm shadow-sm p-6">
              <div class="hidden md:grid grid-cols-12 gap-4 border-b border-[#e0dcd4] pb-3 mb-4">
                <div class="col-span-5 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider">Product</div>
                <div class="col-span-2 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider text-center">Price</div>
                <div class="col-span-3 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider text-center">Quantity</div>
                <div class="col-span-2 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider text-right">Total</div>
              </div>

              <div class="space-y-6">
                <% cart.items.forEach(item => { %>
                  <% if (item.unavailable) { %>
                    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-2" role="alert">
                      <p>"<%= item.productId.productName %>" is no longer available</p>
                    </div>
                  <% } %>
                  
                  <div class="cart-item grid grid-cols-12 gap-4 items-center py-4 border-b border-[#e0dcd4]/50 <%= item.unavailable ? 'unavailable-item' : '' %>">
                    <div class="col-span-12 md:col-span-5 flex items-center gap-4">
                      <a href="/product/<%= item.productId._id %>" class="w-20 h-20 flex-shrink-0">
                        <img 
                          src="<%= item.productId.productImage[0] || '/Images/placeholder.jpg' %>" 
                          alt="<%= item.productId.productName %>"
                          class="w-full h-full object-contain"
                          onerror="this.src='/Images/placeholder.jpg'"
                        >
                      </a>
                      <div>
                        <a href="/product/<%= item.productId._id %>" class="font-medium text-[#2C2C2C] hover:text-[#f8c78d] transition-colors font-montserrat text-sm">
                          <%= item.productId.productName %>
                        </a>
                        <p class="text-[#2C2C2C]/60 font-montserrat text-xs mt-1">
                          <%= item.productId.category.name %>
                        </p>
                        <p class="text-[#2C2C2C]/60 font-montserrat text-xs">
                          Size: <%= item.productId.size %>
                        </p>
                      </div>
                    </div>

                    <div class="col-span-4 md:col-span-2 text-center font-montserrat text-[#2C2C2C]">
                      $<%= item.price.toFixed(2) %>
                    </div>

                    <div class="col-span-4 md:col-span-3 flex items-center justify-center">
                      <div class="flex items-center">
                        <button 
                          class="quantity-btn decrease-btn <%= item.unavailable ? 'cursor-not-allowed' : '' %>" 
                          data-product-id="<%= item.productId._id %>"
                          <%= item.unavailable ? 'disabled' : '' %>
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                          </svg>
                        </button>
                        <input 
                          type="number" 
                          value="<%= item.quantity %>" 
                          min="1" 
                          max="<%= item.productId.stock %>"
                          class="quantity-input font-montserrat text-sm <%= item.unavailable ? 'cursor-not-allowed' : '' %>"
                          data-product-id="<%= item.productId._id %>"
                          <%= item.unavailable ? 'disabled' : '' %>
                        >
                        <button 
                          class="quantity-btn increase-btn <%= item.unavailable ? 'cursor-not-allowed' : '' %>" 
                          data-product-id="<%= item.productId._id %>"
                          <%= item.unavailable ? 'disabled' : '' %>
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                          </svg>
                        </button>
                      </div>
                    </div>

                    <div class="col-span-4 md:col-span-2 flex items-center justify-end">
                      <div class="font-montserrat text-[#2C2C2C]">
                        $<%= item.totalPrice.toFixed(2) %>
                      </div>
                      <button 
                        class="remove-btn ml-4 text-[#2C2C2C]/40 hover:text-[#d32f2f]"
                        data-product-id="<%= item.productId._id %>"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                <% }); %>
              </div>
            </div>

            <div class="mt-6">
              <a href="/shop" class="text-[#2C2C2C] hover:text-[#f8c78d] transition-colors font-montserrat flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Continue Shopping
              </a>
            </div>
          </div>

          <div class="lg:w-1/3">
            <div class="bg-white rounded-sm shadow-sm p-6 sticky top-4">
              <h2 class="text-xl font-henny mb-6 text-[#2C2C2C]">Order Summary</h2>
              
              <div class="space-y-4">
                <div class="flex justify-between items-center">
                  <span class="text-[#2C2C2C]/70 font-montserrat">Subtotal</span>
                  <span class="subtotal-display text-[#2C2C2C] font-montserrat">$<%= subtotal.toFixed(2) %></span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-[#2C2C2C]/70 font-montserrat">Shipping</span>
                  <span class="shipping-display text-[#2C2C2C] font-montserrat">$<%= shipping.toFixed(2) %></span>
                </div>
                <div class="border-t border-[#e0dcd4] pt-4 mt-2">
                  <div class="flex justify-between items-center">
                    <span class="text-[#2C2C2C] font-montserrat font-medium">Total</span>
                    <span class="total-display text-[#2C2C2C] font-montserrat font-medium">$<%= total.toFixed(2) %></span>
                  </div>
                </div>
              </div>

              <a 
                href="<%= canCheckout ? '/checkout' : '#' %>" 
                class="checkout-btn w-full mt-8 px-6 py-3 bg-[#f8c78d] text-[#2C2C2C] rounded-sm hover:bg-[#e6b97e] transition-colors font-montserrat text-sm font-medium text-center block
                  <%= !canCheckout ? 'opacity-60 cursor-not-allowed' : '' %>"
                <%= !canCheckout ? 'title="Some items are unavailable. Please remove them to proceed."' : '' %>
              >
                Proceed to Checkout
              </a>
            </div>
          </div>
        </div>
      <% } %>
      </div>

      <%- include('../partials/user/footer.ejs') %>

      <script> 
document.addEventListener('DOMContentLoaded', function() {
  if (document.querySelector('.empty-cart-message')) {
    return;
  }

  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        func.apply(this, args);
      }, wait);
    };
  }

  function manageSpinner(input, show) {
    const existingSpinner = input.parentNode.querySelector('.spinner-border');
    if (show) {
      if (!existingSpinner) {
        const spinner = document.createElement('div');
        spinner.className = 'spinner-border spinner-border-sm text-secondary ms-2';
        input.parentNode.appendChild(spinner);
      }
    } else {
      if (existingSpinner) {
        existingSpinner.remove();
      }
    }
  }

  const updateCart = debounce(async function(productId, newQuantity) {
    const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
    if (!input) return;

    try {
      input.disabled = true;
      manageSpinner(input, true);

      const response = await fetch('/update-cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [{
            productId,
            quantity: newQuantity
          }]
        }),
        credentials: 'include'
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to update cart');
      }

      if (data.success) {
        const cartCountEl = document.getElementById('cart-count');
        if (cartCountEl) {
          cartCountEl.textContent = data.cartCount || 0;
        }

        const subtotalEl = document.querySelector('.subtotal-display');
        const shippingEl = document.querySelector('.shipping-display');
        const totalEl = document.querySelector('.total-display');

        if (subtotalEl) subtotalEl.textContent = `$${data.cart.subtotal.toFixed(2)}`;
        if (shippingEl) shippingEl.textContent = `$${data.cart.shipping.toFixed(2)}`;
        if (totalEl) totalEl.textContent = `$${data.cart.total.toFixed(2)}`;

        input.defaultValue = newQuantity;

        showToast('Cart updated successfully', 'success');
      } else {
        input.value = input.defaultValue;
        showToast(data.message || 'Failed to update cart', 'error');
      }
    } catch (error) {
      console.error('Error updating cart:', error);
      input.value = input.defaultValue;
      showToast(error.message || 'Error updating cart', 'error');
    } finally {
      manageSpinner(input, false);
      input.disabled = false;
    }
  }, 500);

  document.querySelectorAll('.increase-btn, .decrease-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      if (this.disabled) return;

      const productId = this.getAttribute('data-product-id');
      const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
      if (!input) return;

      let quantity = parseInt(input.value);
      if (this.classList.contains('increase-btn')) {
        if (quantity < parseInt(input.max)) {
          quantity++;
        } else {
          showToast(`Maximum available stock is ${input.max}`, 'warning');
          return;
        }
      } else {
        quantity = Math.max(1, quantity - 1);
      }

      input.value = quantity;

      updateCart(productId, quantity);
    });
  });

  document.querySelectorAll('.quantity-input').forEach(input => {
    input.defaultValue = input.value;

    input.addEventListener('change', function() {
      if (this.disabled) return;

      const productId = this.getAttribute('data-product-id');
      const max = parseInt(this.max);
      let value = parseInt(this.value);

      if (isNaN(value) || value < 1) {
        value = 1;
      } else if (value > max) {
        value = max;
        showToast(`Maximum available stock is ${max}`, 'warning');
      }

      this.value = value;

      if (value !== parseInt(this.defaultValue)) {
        updateCart(productId, value);
      }
    });
  });

  document.querySelectorAll('.remove-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const productId = this.getAttribute('data-product-id');
      const productName = this.closest('.cart-item').querySelector('a[href^="/product/"]').textContent.trim();

      showConfirmToast(
        `Remove <strong>${productName}</strong> from cart?`,
        () => removeItem(productId, productName),
        () => showToast('Remove action cancelled', 'info')
      );
    });
  });

  async function removeItem(productId, productName) {
    try {
      const response = await fetch('/remove-from-cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          productId: productId 
        }),
        credentials: 'include'
      });

      const data = await response.json();

      if (data.success) {
        showToast(`Removed ${productName} from cart`, 'success');
        const cartCountEl = document.getElementById('cart-count');
        if (cartCountEl) {
          cartCountEl.textContent = data.cartCount || 0;
        }
        setTimeout(() => window.location.reload(), 1000);
      } else {
        showToast(data.message || 'Failed to remove item', 'error');
      }
    } catch (error) {
      console.error('Error removing item:', error);
      showToast(error.message || 'Error removing item', 'error');
    }
  }

  function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = `fixed bottom-4 right-4 ${
      type === 'success' ? 'bg-[#2C2C2C]' : 
      type === 'warning' ? 'bg-yellow-500' : 
      type === 'info' ? 'bg-blue-500' : 'bg-red-500'
    } text-white px-6 py-3 rounded-lg shadow-xl transform translate-y-0 opacity-100 transition-all duration-300 z-50 flex items-center`;

    const icon = document.createElement('span');
    icon.className = 'mr-2';
    icon.innerHTML = 
      type === 'success' ? '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' :
      type === 'warning' ? '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>' :
      type === 'info' ? '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>' :
      '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';

    const text = document.createElement('span');
    text.innerHTML = message;
    text.className = 'font-montserrat';

    toast.appendChild(icon);
    toast.appendChild(text);
    document.body.appendChild(toast);

    setTimeout(() => {
      toast.classList.add('translate-y-full', 'opacity-0');
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }

  function showConfirmToast(message, onConfirm, onCancel) {
    const toast = document.createElement('div');
    toast.className = 'toast-confirm fixed bottom-4 right-4 bg-[#2C2C2C] text-white px-6 py-4 rounded-lg shadow-xl z-50';

    toast.innerHTML = `
      <div class="flex flex-col">
        <p class="font-montserrat mb-3">${message}</p>
        <div class="flex gap-2 justify-end">
          <button class="cancel-btn px-3 py-1 bg-gray-500 text-white rounded text-sm font-montserrat">
            Cancel
          </button>
          <button class="confirm-btn px-3 py-1 bg-red-500 text-white rounded text-sm font-montserrat">
            Remove
          </button>
        </div>
      </div>
    `;

    document.body.appendChild(toast);

    const confirmBtn = toast.querySelector('.confirm-btn');
    const cancelBtn = toast.querySelector('.cancel-btn');

    confirmBtn.addEventListener('click', () => {
      toast.classList.add('hidden');
      setTimeout(() => {
        toast.remove();
        onConfirm();
      }, 300);
    });

    cancelBtn.addEventListener('click', () => {
      toast.classList.add('hidden');
      setTimeout(() => {
        toast.remove();
        onCancel();
      }, 300);
    });

    let timeout = setTimeout(() => {
      toast.classList.add('hidden');
      setTimeout(() => {
        toast.remove();
        onCancel();
      }, 300);
    }, 5000);

    toast.addEventListener('mouseenter', () => clearTimeout(timeout));
    toast.addEventListener('mouseleave', () => {
      timeout = setTimeout(() => {
        toast.classList.add('hidden');
        setTimeout(() => {
          toast.remove();
          onCancel();
        }, 300);
      }, 2000);
    });
  }
});
      </script>
  </body>
</html>

