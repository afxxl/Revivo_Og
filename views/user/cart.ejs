<!doctype html>
<html lang="en">
  <head>
    <title>Revivo - Your Cart</title>
    <link href="/css/styles.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Henny+Penny&family=Playfair+Display:wght@400;500;600&family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet">
    <!-- Add SweetAlert CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <style>
      .cart-item {
        transition: all 0.3s ease;
      }
      .cart-item:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      }
      .quantity-btn {
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #e0dcd4;
        background: transparent;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      .quantity-btn:hover {
        background: #f8f7f5;
      }
      .quantity-input {
        width: 50px;
        text-align: center;
        border-top: 1px solid #e0dcd4;
        border-bottom: 1px solid #e0dcd4;
        border-left: none;
        border-right: none;
        outline: none;
      }
      .remove-btn {
        transition: all 0.2s ease;
      }
      .remove-btn:hover {
        color: #d32f2f;
      }
      .checkout-btn {
        transition: all 0.3s ease;
        letter-spacing: 1px;
      }
      .checkout-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(44, 44, 44, 0.15);
      }
      
      /* Added specific classes for totals */
      .subtotal-display, 
      .shipping-display, 
      .total-display {
        transition: all 0.3s ease;
      }
    </style>
  </head>

  <body class="bg-[#f8f7f5]">
    <%- include('../partials/user/header.ejs') %>

    <div class="container mx-auto px-4 py-12 max-w-7xl">
      <div class="flex items-center gap-3 mb-8">
        <a href="/" class="text-[#2C2C2C]/60 hover:text-[#2C2C2C] transition-colors font-montserrat text-sm">Home</a>
        <span class="text-[#2C2C2C]/40">/</span>
        <span class="text-[#2C2C2C] font-montserrat text-sm">Shopping Cart</span>
      </div>

      <h1 class="text-3xl font-henny mb-8 text-[#2C2C2C]">Your Cart</h1>

      <% if (cart.items.length === 0) { %>
        <div class="text-center py-16 empty-cart-message">
          <svg class="w-16 h-16 mx-auto text-[#2C2C2C]/30 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
          </svg>
          <h2 class="text-xl font-medium text-[#2C2C2C] mb-4">Your cart is empty</h2>
          <p class="text-[#2C2C2C]/70 mb-6 font-montserrat">Start shopping to add items to your cart</p>
          <a href="/shop" class="inline-block px-6 py-3 bg-[#2C2C2C] text-white rounded-sm hover:bg-[#1a1a1a] transition-colors font-montserrat">
            Continue Shopping
          </a>
        </div>
      <% } else { %>
        <div class="flex flex-col lg:flex-row gap-8">
          <!-- Cart Items -->
          <div class="lg:w-2/3">
            <div class="bg-white rounded-sm shadow-sm p-6">
              <div class="hidden md:grid grid-cols-12 gap-4 border-b border-[#e0dcd4] pb-3 mb-4">
                <div class="col-span-5 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider">Product</div>
                <div class="col-span-2 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider text-center">Price</div>
                <div class="col-span-3 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider text-center">Quantity</div>
                <div class="col-span-2 font-montserrat text-sm text-[#2C2C2C]/70 uppercase tracking-wider text-right">Total</div>
              </div>

              <div class="space-y-6">
                <% cart.items.forEach(item => { %>
                  <div class="cart-item grid grid-cols-12 gap-4 items-center py-4 border-b border-[#e0dcd4]/50">
                    <!-- Product Image & Name -->
                    <div class="col-span-12 md:col-span-5 flex items-center gap-4">
                      <a href="/product/<%= item.productId._id %>" class="w-20 h-20 flex-shrink-0">
                        <img 
                          src="<%= item.productId.productImage[0] || '/Images/placeholder.jpg' %>" 
                          alt="<%= item.productId.productName %>"
                          class="w-full h-full object-contain"
                          onerror="this.src='/Images/placeholder.jpg'"
                        >
                      </a>
                      <div>
                        <a href="/product/<%= item.productId._id %>" class="font-medium text-[#2C2C2C] hover:text-[#f8c78d] transition-colors font-montserrat text-sm">
                          <%= item.productId.productName %>
                        </a>
                        <p class="text-[#2C2C2C]/60 font-montserrat text-xs mt-1">
                          <%= item.productId.category.name %>
                        </p>
                        <p class="text-[#2C2C2C]/60 font-montserrat text-xs">
                          Size: <%= item.productId.size %>
                        </p>
                      </div>
                    </div>

                    <!-- Price -->
                    <div class="col-span-4 md:col-span-2 text-center font-montserrat text-[#2C2C2C]">
                      $<%= item.price.toFixed(2) %>
                    </div>

                    <!-- Quantity -->
                    <div class="col-span-4 md:col-span-3 flex items-center justify-center">
                      <div class="flex items-center">
                        <button 
                          class="quantity-btn decrease-btn" 
                          data-product-id="<%= item.productId._id %>"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                          </svg>
                        </button>
                        <input 
                          type="number" 
                          value="<%= item.quantity %>" 
                          min="1" 
                          max="<%= item.productId.stock %>"
                          class="quantity-input font-montserrat text-sm"
                          data-product-id="<%= item.productId._id %>"
                        >
                        <button 
                          class="quantity-btn increase-btn" 
                          data-product-id="<%= item.productId._id %>"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                          </svg>
                        </button>
                      </div>
                    </div>

                    <!-- Total -->
                    <div class="col-span-4 md:col-span-2 flex items-center justify-end">
                      <div class="font-montserrat text-[#2C2C2C]">
                        $<%= item.totalPrice.toFixed(2) %>
                      </div>
                      <button 
                        class="remove-btn ml-4 text-[#2C2C2C]/40 hover:text-[#d32f2f]"
                        data-product-id="<%= item.productId._id %>"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                <% }); %>
              </div>
            </div>

            <div class="flex justify-between items-center mt-6">
              <a href="/shop" class="text-[#2C2C2C] hover:text-[#f8c78d] transition-colors font-montserrat flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Continue Shopping
              </a>
              <button id="update-cart-btn" class="px-6 py-2 bg-[#2C2C2C] text-white rounded-sm hover:bg-[#1a1a1a] transition-colors font-montserrat text-sm">
                Update Cart
              </button>
            </div>
          </div>

          <!-- Order Summary -->
          <div class="lg:w-1/3">
            <div class="bg-white rounded-sm shadow-sm p-6 sticky top-4">
              <h2 class="text-xl font-henny mb-6 text-[#2C2C2C]">Order Summary</h2>
              
              <div class="space-y-4">
                <div class="flex justify-between items-center">
                  <span class="text-[#2C2C2C]/70 font-montserrat">Subtotal</span>
                  <span class="subtotal-display text-[#2C2C2C] font-montserrat">$<%= subtotal.toFixed(2) %></span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-[#2C2C2C]/70 font-montserrat">Shipping</span>
                  <span class="shipping-display text-[#2C2C2C] font-montserrat">$<%= shipping.toFixed(2) %></span>
                </div>
                <div class="border-t border-[#e0dcd4] pt-4 mt-2">
                  <div class="flex justify-between items-center">
                    <span class="text-[#2C2C2C] font-montserrat font-medium">Total</span>
                    <span class="total-display text-[#2C2C2C] font-montserrat font-medium">$<%= total.toFixed(2) %></span>
                  </div>
                </div>
              </div>

              <a 
                href="/checkout" 
                class="checkout-btn w-full mt-8 px-6 py-3 bg-[#f8c78d] text-[#2C2C2C] rounded-sm hover:bg-[#e6b97e] transition-colors font-montserrat text-sm font-medium text-center block"
              >
                Proceed to Checkout
              </a>
            </div>
          </div>
        </div>
      <% } %>
    </div>

    <%- include('../partials/user/footer.ejs') %>

    <!-- Add SweetAlert JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Skip if cart is empty
        if (document.querySelector('.empty-cart-message')) {
          return;
        }

        // Quantity buttons
        document.querySelectorAll('.increase-btn, .decrease-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
            if (!input) return;
            
            let quantity = parseInt(input.value);
            if (this.classList.contains('increase-btn')) {
              quantity++;
            } else {
              quantity = Math.max(1, quantity - 1);
            }
            input.value = quantity;
          });
        });

        // Input validation
        document.querySelectorAll('.quantity-input').forEach(input => {
          input.addEventListener('change', function() {
            const max = parseInt(this.max);
            const value = parseInt(this.value);
            
            if (value > max) {
              this.value = max;
              showToast(`Maximum available stock is ${max}`, 'warning');
            }
          });
        });

        // Update cart button
        const updateBtn = document.getElementById('update-cart-btn');
        if (updateBtn) {
          updateBtn.addEventListener('click', async function() {
            try {
 updateBtn.disabled = true;
    updateBtn.innerHTML = 'Updating...';
              const items = [];
              
              document.querySelectorAll('.cart-item').forEach(itemEl => {
                const input = itemEl.querySelector('.quantity-input');
                const productName = itemEl.querySelector('a[href^="/product/"]').textContent.trim();
                if (!input) return;
                
                items.push({
                  productId: input.dataset.productId,
                  quantity: Math.max(1, parseInt(input.value)),
                  productName: productName
                });
              });

              const response = await fetch('/update-cart', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ items }),
                credentials: 'include'
              });

              const data = await response.json();

              if (!response.ok) {
                throw new Error(data.message || 'Failed to update cart');
              }

              if (data.success) {
                // Update cart count in header
                const cartCountEl = document.getElementById('cart-count');
                if (cartCountEl) {
                  cartCountEl.textContent = data.cartCount || 0;
                }
                
                // Update displayed totals
                const subtotalEl = document.querySelector('.subtotal-display');
                const shippingEl = document.querySelector('.shipping-display');
                const totalEl = document.querySelector('.total-display');
                
                if (subtotalEl) subtotalEl.textContent = `$${data.cart.subtotal.toFixed(2)}`;
                if (shippingEl) shippingEl.textContent = `$${data.cart.shipping.toFixed(2)}`;
                if (totalEl) totalEl.textContent = `$${data.cart.total.toFixed(2)}`;
                
                showToast('Cart updated successfully');
              } else {
                showToast(data.message || 'Failed to update cart', 'error');
              }
            } catch (error) {
              console.error('Error updating cart:', error);
              showToast(error.message || 'Error updating cart', 'error');
            }
finally {
    updateBtn.disabled = false;
    updateBtn.innerHTML = 'Update Cart';
  }
          });
        }

        // Remove buttons - updated to use SweetAlert
        document.querySelectorAll('.remove-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const productId = this.getAttribute('data-product-id');
            const productName = this.closest('.cart-item').querySelector('a[href^="/product/"]').textContent.trim();
            
            const result = await Swal.fire({
              title: 'Remove Item',
              html: `Are you sure you want to remove <strong>${productName}</strong> from your cart?`,
              icon: 'question',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#2C2C2C',
              confirmButtonText: 'Yes, remove it',
              cancelButtonText: 'Cancel',
              reverseButtons: true
            });
            
            if (result.isConfirmed) {
              try {
                const response = await fetch('/remove-from-cart', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ 
                    productId: productId 
                  }),
                });

                const data = await response.json();

                if (data.success) {
                  Swal.fire({
                    title: 'Removed!',
                    text: 'The item has been removed from your cart.',
                    icon: 'success',
                    confirmButtonColor: '#2C2C2C',
                  }).then(() => {
                    window.location.reload();
                  });
                } else {
                  Swal.fire({
                    title: 'Error!',
                    text: 'Failed to remove item',
                    icon: 'error',
                    confirmButtonColor: '#2C2C2C',
                  });
                }
              } catch (error) {
                console.error('Error removing item:', error);
                Swal.fire({
                  title: 'Error!',
                  text: 'Error removing item',
                  icon: 'error',
                  confirmButtonColor: '#2C2C2C',
                });
              }
            }
          });
        });

        function showToast(message, type = 'success') {
          const toast = document.createElement('div');
          toast.className = `fixed bottom-4 right-4 ${type === 'success' ? 'bg-[#2C2C2C]' : 'bg-red-500'} text-white px-6 py-3 rounded-lg shadow-xl transform translate-y-0 opacity-100 transition-all duration-300 z-50 flex items-center`;
          
          const icon = document.createElement('span');
          icon.className = 'mr-2';
          icon.innerHTML = type === 'success' 
            ? '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
            : '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
          
          const text = document.createElement('span');
          text.textContent = message;
          text.className = 'font-montserrat';
          
          toast.appendChild(icon);
          toast.appendChild(text);
          document.body.appendChild(toast);

          setTimeout(() => {
            toast.classList.add('translate-y-full', 'opacity-0');
            setTimeout(() => toast.remove(), 300);
          }, 3000);
        }
      });
    </script>
  </body>
</html>
